import {Injectable} from '@angular/core';
import Dexie, {Table} from 'dexie';
import {BasicClanData} from '../../../models/clan/clan-response.model';

interface IStoreRecord {
  key: string | number;  // –ø–µ—Ä–≤–∏—á–Ω—ã–π –∫–ª—é—á
  data: any;             // –ª—é–±—ã–µ –¥–∞–Ω–Ω—ã–µ
  timestamp: number;     // –¥–∞—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
}

export class AppDB extends Dexie {
  clans!: Table<IStoreRecord, string | number>;
  tanks!: Table<IStoreRecord, string | number>;

  constructor() {
    super('AppDB');

    this.version(1).stores({
      // &key => key —è–≤–ª—è–µ—Ç—Å—è primaryKey
      clans: '&key',
      tanks: '&key',
    });
  }
}

@Injectable({
  providedIn: 'root'
})
export class IndexedDbService {
  db: AppDB;

  constructor() {
    this.db = new AppDB();
  }

  async saveDataToIndexedDB<T>(
    store: keyof AppDB,
    key: string | number,
    data: T,
    timestamp?: number
  ): Promise<void> {
    try {
      if (data === null || data === undefined) {
        console.warn(`‚ö†Ô∏è [IndexedDB] –ü—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—è–µ—Ç—Å—è (store: ${store}, key: ${key}).`);
        return;
      }

      if (!key && key !== 0) {
        console.warn(`‚ö†Ô∏è [IndexedDB] –û—à–∏–±–∫–∞: –ø–µ—Ä–µ–¥–∞–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–ª—é—á (store: ${store}).`);
        return;
      }

      const payload: IStoreRecord = {key, data, timestamp: timestamp ?? Date.now()};
      const table = this.db[store] as Table<IStoreRecord, string | number>;
      if (!table) {
        console.error(`‚ùå [IndexedDB] –û—à–∏–±–∫–∞: —Ç–∞–±–ª–∏—Ü–∞ "${store}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.`);
        return;
      }

      await table.put(payload);
      console.log(`‚úÖ [IndexedDB] –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ "${store}" —Å –∫–ª—é—á–æ–º "${key}"`);
    } catch (error) {
      console.error(`‚ùå [IndexedDB] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö (store: ${store}, key: ${key}):`, error);
    }
  }

  async getDataFromIndexedDB<T>(
    store: keyof AppDB,
    key: string | number
  ): Promise<{ data: T; timestamp: number } | null> {
    try {
      const table = this.db[store] as Table<IStoreRecord, string | number>;
      const record = await table.get(key);

      if (!record) {
        console.warn(`‚ö†Ô∏è [IndexedDB] –î–∞–Ω–Ω—ã–µ –ø–æ –∫–ª—é—á—É "${key}" –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ "${store}" –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.`);
        return null;
      }

      return {
        data: record.data as T,
        timestamp: record.timestamp
      };
    } catch (error) {
      console.error(`‚ùå [IndexedDB] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö (store: ${store}, key: ${key}):`, error);
      return null;
    }
  }

  async findClansByNameOrTag(searchTerm: string): Promise<BasicClanData[]> {
    console.log(`üîé –ü–æ–∏—Å–∫ –≤ IndexedDB (store: "clans"): "${searchTerm}"`);

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã `clans`
    const records = await this.db.clans.toArray();  // => IStoreRecord[]

    // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ "data" –∏–∑ –∫–∞–∂–¥–æ–π –∑–∞–ø–∏—Å–∏ –≤ –æ–¥–∏–Ω –æ–±—â–∏–π –º–∞—Å—Å–∏–≤
    // –í–µ–¥—å –≤ –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏ –º–æ–≥ –±—ã—Ç—å –º–∞—Å—Å–∏–≤ –∫–ª–∞–Ω–æ–≤, –∞ –≤ –¥—Ä—É–≥–æ–π ‚Äì –µ—â—ë –º–∞—Å—Å–∏–≤, –∏—Ç–¥.
    const allClans = records.flatMap(record => {
      // –µ—Å–ª–∏ record.data ‚Äì —ç—Ç–æ –º–∞—Å—Å–∏–≤, –≤–æ–∑—å–º—ë–º —ç–ª–µ–º–µ–Ω—Ç—ã
      if (Array.isArray(record.data)) {
        return record.data;
      }
      // –µ—Å–ª–∏ –æ–¥–∏–Ω –æ–±—ä–µ–∫—Ç, —Ç–æ –æ–±–µ—Ä–Ω—ë–º –≤ –º–∞—Å—Å–∏–≤
      return record.data ? [record.data] : [];
    });

    // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ searchTerm, –¥–æ–ø—É—Å—Ç–∏–º, –ø–æ –∏–º–µ–Ω–∏/—Ç–µ–≥—É
    const lowerTerm = searchTerm.trim().toLowerCase();

    // –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –ø–æ–∏—Å–∫–∞ –ø—É—Å—Ç–∞—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ—Ö
    if (!lowerTerm) {
      console.log(`‚úÖ [IndexedDB] –ù–∞–π–¥–µ–Ω–æ –∫–ª–∞–Ω–æ–≤ (–±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞): ${allClans.length}`, allClans);
      return allClans;
    }

    const filtered = allClans.filter((clan: BasicClanData) => {
      // –ø–æ–¥—Å—Ç—Ä–∞—Ö–æ–≤–∫–∞ –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –Ω–µ—Ç name –∏–ª–∏ tag
      const nameMatches = clan.name?.toLowerCase().includes(lowerTerm);
      const tagMatches = clan.tag?.toLowerCase().includes(lowerTerm);
      return nameMatches || tagMatches;
    });

    console.log(`‚úÖ [IndexedDB] –ù–∞–π–¥–µ–Ω–æ –∫–ª–∞–Ω–æ–≤: ${filtered.length}`, filtered);
    return filtered;
  }

  async getRecord(store: keyof AppDB, key: string | number): Promise<IStoreRecord | undefined> {
    try {
      const table = this.db[store] as Table<IStoreRecord, string | number>;
      const record = await table.get(key);
      if (record) {
        console.log(`üì• [IndexedDB] –î–∞–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –∫–ª—é—á–∞ "${key}" –≤ "${store}":`, record);
        return record;
      } else {
        console.warn(`‚ö†Ô∏è [IndexedDB] –î–∞–Ω–Ω—ã–µ –ø–æ –∫–ª—é—á—É "${key}" –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ "${store}" –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.`);
        return undefined;
      }
    } catch (error) {
      console.error(`‚ùå [IndexedDB] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö (store: ${store}, key: ${key}):`, error);
      return undefined;
    }
  }
}
