import {Injectable} from '@angular/core';
import Dexie, {Table} from 'dexie';
import {BasicClanData} from '../../../models/clan/clan-response.model';

// –û–±—â–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–ø–∏—Å–∏
interface IStoreRecord {
  key: string | number;
  data: any;
  timestamp: number;
}

// Dexie-—Ö—Ä–∞–Ω–∏–ª–∏—â–µ
export class AppDB extends Dexie {
  clans!: Table<IStoreRecord, string | number>;
  tanks!: Table<IStoreRecord, string | number>;

  constructor() {
    super('AppDB');
    this.version(1).stores({
      clans: '&key',
      tanks: '&key',
    });
  }
}

@Injectable({providedIn: 'root'})
export class IndexedDbService {
  private db: AppDB;

  constructor() {
    this.db = new AppDB();
  }

  /** –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ (–ª—é–±–æ–π —Ç–∏–ø) –≤ IndexedDB */
  async saveDataToIndexedDB<T>(
    store: keyof AppDB,
    key: string | number,
    data: T,
    timestamp?: number
  ): Promise<void> {
    if (data == null) {
      console.warn(`‚ö† [IndexedDB] –ü—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ, —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –Ω–µ—á–µ–≥–æ (store: ${store}, key: ${key})`);
      return;
    }
    if (!key && key !== 0) {
      console.error(`‚ùå [IndexedDB] –ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á: '${key}' (store: ${store})`);
      return;
    }

    try {
      const finalTimestamp = timestamp ?? Date.now();
      const record: IStoreRecord = {
        key,
        data: sanitize(data),
        timestamp: finalTimestamp
      };
      const table = this.db[store] as Table<IStoreRecord, string | number>;
      await table.put(record);
      // console.log(`‚úÖ [IndexedDB] '${store}'/'${key}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.`);
    } catch (error: any) {
      console.error(`‚ùå [IndexedDB] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ '${store}'/'${key}':`, error.message);
    }
  }

  /** –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ IndexedDB */
  async getDataFromIndexedDB<T>(
    store: keyof AppDB,
    key: string | number
  ): Promise<{ data: T; timestamp: number } | null> {
    try {
      const table = this.db[store] as Table<IStoreRecord, string | number>;
      const record = await table.get(key);

      if (!record) {
        // console.warn(`‚ö† [IndexedDB] –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ '${store}'/'${key}'`);
        return null;
      }
      return {
        data: record.data as T,
        timestamp: record.timestamp
      };
    } catch (error: any) {
      console.error(`‚ùå [IndexedDB] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ '${store}'/'${key}':`, error.message);
      return null;
    }
  }

  /** –ü—Ä–∏–º–µ—Ä –ø–æ–∏—Å–∫–∞ –ø–æ –∫–ª–∞–Ω–∞–º */
  async findClansByNameOrTag(searchTerm: string): Promise<BasicClanData[]> {
    // ...
    // –≠—Ç–∞ —á–∞—Å—Ç—å –º–æ–∂–µ—Ç –Ω–µ –º–µ–Ω—è—Ç—å—Å—è
    return [];
  }

  async getRecord(store: keyof AppDB, key: string | number): Promise<IStoreRecord | undefined> {
    try {
      const table = this.db[store] as Table<IStoreRecord, string | number>;
      const record = await table.get(key);
      if (record) {
        console.log(`üì• [IndexedDB] –î–∞–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –∫–ª—é—á–∞ "${key}" –≤ "${store}":`, record);
        return record;
      } else {
        console.warn(`‚ö†Ô∏è [IndexedDB] –î–∞–Ω–Ω—ã–µ –ø–æ –∫–ª—é—á—É "${key}" –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ "${store}" –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.`);
        return undefined;
      }
    } catch (error) {
      console.error(`‚ùå [IndexedDB] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö (store: ${store}, key: ${key}):`, error);
      return undefined;
    }
  }
}

function sanitize<T>(value: T): T {
  return JSON.parse(JSON.stringify(value));
}
