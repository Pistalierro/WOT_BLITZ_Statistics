import {inject, Injectable} from '@angular/core';
import {collection, doc, Firestore, getDoc, getDocs, setDoc} from '@angular/fire/firestore';
import {Auth} from '@angular/fire/auth';

@Injectable({
  providedIn: 'root'
})
export class FirestoreStorageService {

  private firestore = inject(Firestore);
  private auth = inject(Auth);
  private readonly BATCH_SIZE = 9000;

  async saveDataToFirestore<T>(collectionName: string, documentId: string, data: T): Promise<void> {
    const user = this.auth.currentUser;
    if (!user) {
      console.error('‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω!');
      return;
    }

    if (data == null) {
      console.warn(`‚ö† –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Firestore: ${collectionName}/${documentId}`);
      return;
    }

    try {
      const timestamp = Date.now();
      // "–°–∞–Ω–∏—Ç–∏–∑–∏—Ä—É–µ–º" (—É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å—Å—ã–ª–∫–∏, undefined –∏ —Ç.–ø.)
      const payload = sanitize({data, timestamp});

      // –ï—Å–ª–∏ —ç—Ç–æ –º–∞—Å—Å–∏–≤ –ò –æ–Ω –∫—Ä—É–ø–Ω–µ–µ BATCH_SIZE => —á–∞–Ω–∫
      if (Array.isArray(data) && data.length > this.BATCH_SIZE) {
        await this.saveLargeArray(collectionName, documentId, payload);
      } else {
        // –ò–Ω–∞—á–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ–¥–Ω–∏–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–º
        const ref = doc(this.firestore, collectionName, documentId);
        await setDoc(ref, payload);
        console.log(`‚úÖ [Firestore] '${collectionName}/${documentId}' —Å–æ—Ö—Ä–∞–Ω—ë–Ω (—Ü–µ–ª–∏–∫–æ–º).`);
      }
    } catch (error: any) {
      console.error(`‚ùå [Firestore] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è '${collectionName}/${documentId}':`, error.message);
    }
  }

  async loadDataFromFirestore<T>(collectionName: string, documentId: string): Promise<{ data: T; timestamp: number } | null> {
    try {
      const docRef = doc(this.firestore, collectionName, documentId);
      const snap = await getDoc(docRef);

      if (snap.exists()) {
        console.log(`‚úÖ [Firestore] '${collectionName}/${documentId}' –Ω–∞–π–¥–µ–Ω (—Ü–µ–ª–∏–∫–æ–º).`);

        const docData = snap.data() as { data: T; timestamp: number };
        if (Array.isArray(docData?.data) && docData.data.length > 0) {
          console.log(`üìã [Firestore] '${collectionName}/${documentId}' —Å–æ–¥–µ—Ä–∂–∏—Ç ${docData.data.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤.`);
          return docData;
        }

        console.warn(`‚ö† [Firestore] '${collectionName}/${documentId}' –Ω–∞–π–¥–µ–Ω, –Ω–æ data –ø—É—Å—Ç.`);
      } else {
        console.log(`‚ö† '${collectionName}/${documentId}' –Ω–µ—Ç —Ü–µ–ª—å–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞. –ü—Ä–æ–±—É–µ–º chunks...`);
      }

      // –ï—Å–ª–∏ —Ü–µ–ª—å–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–µ—Ç –∏–ª–∏ data –ø—É—Å—Ç–∞—è ‚Üí –≥—Ä—É–∑–∏–º —á–∞–Ω–∫–∏
      return await this.loadLargeArray<T>(collectionName, documentId);

    } catch (error: any) {
      console.error(`‚ùå [Firestore] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ '${collectionName}/${documentId}':`, error.message);
      return null;
    }
  }


  /**
   * –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –º–µ—Ç–æ–¥ ‚Äî —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±–æ–ª—å—à–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ —á–∞–Ω–∫–∞–º–∏
   */
  private async saveLargeArray<T>(
    collectionName: string,
    documentId: string,
    payload: { data: T; timestamp: number }
  ): Promise<void> {
    const arr = payload.data as unknown as any[];
    const total = arr.length;
    const batchCount = Math.ceil(total / this.BATCH_SIZE);

    console.log(`üìå [Firestore] –°–æ—Ö—Ä–∞–Ω—è–µ–º '${collectionName}/${documentId}' –±–∞—Ç—á–∞–º–∏ (${this.BATCH_SIZE} —ç–ª.): –≤—Å–µ–≥–æ ${batchCount} —á–∞—Å—Ç–µ–π.`);

    const parentRef = doc(this.firestore, collectionName, documentId);
    const chunksRef = collection(parentRef, 'chunks');

    // (–ü—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–µ —á–∞–Ω–∫–∏ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º)
    // ...

    for (let i = 0; i < batchCount; i++) {
      const slice = arr.slice(i * this.BATCH_SIZE, (i + 1) * this.BATCH_SIZE);
      const batchRef = doc(chunksRef, `batch_${i}`);
      await setDoc(batchRef, {data: sanitize(slice), timestamp: payload.timestamp});
      console.log(`‚úÖ –ß–∞–Ω–∫ ${i + 1}/${batchCount} –∑–∞–ø–∏—Å–∞–Ω (${slice.length} —ç–ª.)`);
    }
  }

  /**
   * –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –º–µ—Ç–æ–¥ ‚Äî –∑–∞–≥—Ä—É–∑–∫–∞ –º–∞—Å—Å–∏–≤–∞ —á–∞–Ω–∫–∞–º–∏
   */
  private async loadLargeArray<T>(collectionName: string, documentId: string): Promise<{ data: T; timestamp: number } | null> {
    try {
      const parentRef = doc(this.firestore, collectionName, documentId);
      const chunksRef = collection(parentRef, 'chunks');
      const snap = await getDocs(chunksRef);

      if (snap.empty) {
        console.warn(`‚ö† [Firestore] –ù–µ—Ç —á–∞–Ω–∫–æ–≤ —É '${collectionName}/${documentId}'`);
        return null;
      }

      let combinedArray: any[] = [];
      let overallTimestamp: number | null = null;

      snap.forEach(docSnap => {
        const chunkData = docSnap.data()['data'] as any[];
        if (Array.isArray(chunkData)) {
          combinedArray = combinedArray.concat(chunkData);
        }
        if (overallTimestamp == null) {
          overallTimestamp = docSnap.data()['timestamp'] || null;
        }
      });

      if (overallTimestamp == null) {
        overallTimestamp = Date.now();
      }

      console.log(`‚úÖ [Firestore] –ß–∞–Ω–∫–∏ '${collectionName}/${documentId}' —Å–æ–±—Ä–∞–Ω—ã (${combinedArray.length} —ç–ª.)`);
      return {data: combinedArray as unknown as T, timestamp: overallTimestamp};
    } catch (error: any) {
      console.error(`‚ùå [Firestore] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞–Ω–∫–æ–≤ '${collectionName}/${documentId}':`, error.message);
      return null;
    }
  }
}

/**
 * –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø—Ä–∏–≤–æ–¥–∏–º data –≤ JSON-–≤–∏–¥
 * (—É–±–∏—Ä–∞–µ–º undefined, Date -> string –∏ —Ç.–ø.)
 */
function sanitize<T>(value: T): T {
  return JSON.parse(JSON.stringify(value));
}
