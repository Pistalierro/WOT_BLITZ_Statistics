import {inject, Injectable} from '@angular/core';
import {AppDB, IndexedDbService} from './indexed-db.service';
import {FirestoreStorageService} from './firestore-storage.service';

@Injectable({
  providedIn: 'root'
})
export class SyncService {

  private indexedDbService = inject(IndexedDbService);
  private firestoreService = inject(FirestoreStorageService);

  async saveDataToAllStorages<T>(store: keyof AppDB, key: string | number, data: T): Promise<void> {
    if (!data) {
      console.warn(`‚ö† –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${key}`);
      return;
    }

    try {
      await Promise.all([
        this.indexedDbService.saveDataToIndexedDB(store, key, data),
        this.firestoreService.saveDataToFirestore(store, key.toString(), Array.isArray(data) ? data : [data]) // üî• –ü—Ä–∏–≤–æ–¥–∏–º data –∫ –º–∞—Å—Å–∏–≤—É
      ]);
      console.log(`‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è –∫–ª—é—á–∞ "${key}" –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ "${store}"`);
    } catch (error: any) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–ª—é—á–∞ "${key}" –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ "${store}":`, error.message);
    }
  }

  async getDataFromAllStorages<T extends any[]>(
    store: keyof AppDB,
    key: string | number,
    fetchApiFn?: () => Promise<T>
  ): Promise<T> {
    try {
      const indexedDbRecord = await this.indexedDbService.getDataFromIndexedDB<T>(store, key);

      if (indexedDbRecord) {
        const {data, timestamp} = indexedDbRecord;

        if (data.length > 0) {
          return data;
        }

        console.log(`‚ö†Ô∏è [Sync] –î–∞–Ω–Ω—ã–µ "${key}" –≤ IndexedDB –ø—É—Å—Ç—ã. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º Firestore...`);
      } else {
        console.log(`‚ö†Ô∏è [Sync] –î–∞–Ω–Ω—ã–µ "${key}" –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ IndexedDB. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ Firestore...`);
      }

      const firestoreResult = await this.firestoreService.loadDataFromFirestore<T>(store, key.toString());
      if (firestoreResult && firestoreResult.data.length > 0) {
        console.log(`üì• [Sync] –î–∞–Ω–Ω—ã–µ "${key}" –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ Firestore (—Ö—Ä–∞–Ω–∏–ª–∏—â–µ: ${store}) —Å timestamp: ${firestoreResult.timestamp}. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ IndexedDB...`);

        await this.indexedDbService.saveDataToIndexedDB(store, key, firestoreResult.data, firestoreResult.timestamp);

        return firestoreResult.data;
      }

      if (fetchApiFn) {
        console.warn(`‚ö†Ô∏è [Sync] –î–∞–Ω–Ω—ã–µ "${key}" –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∏ –≤ IndexedDB, –Ω–∏ –≤ Firestore. –í—ã–∑—ã–≤–∞–µ–º API...`);
        const apiData = await fetchApiFn();
        if (apiData && apiData.length > 0) {
          const now = Date.now();
          await this.indexedDbService.saveDataToIndexedDB(store, key, apiData, now);
          console.log(`‚úÖ [Sync] –î–∞–Ω–Ω—ã–µ "${key}" –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ API –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ IndexedDB —Å timestamp: ${now}`);
          return apiData;
        }
        console.warn(`‚ùå [Sync] API –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ—Ç—É –¥–ª—è "${key}". –í–æ–∑–≤—Ä–∞—â–∞–µ–º [].`);
        return [] as unknown as T;
      }

      console.warn(`‚ö†Ô∏è [Sync] –î–∞–Ω–Ω—ã–µ "${key}" –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∏–≥–¥–µ (IndexedDB, Firestore, API). –í–æ–∑–≤—Ä–∞—â–∞–µ–º [].`);
      return [] as unknown as T;

    } catch (error: any) {
      console.error(`‚ùå [Sync] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö "${key}" (—Ö—Ä–∞–Ω–∏–ª–∏—â–µ: ${store}):`, error);
      return [] as unknown as T;
    }
  }

  isDataFresh(timestamp: number): boolean {
    const TWELVE_HOURS = 12 * 60 * 60 * 1000; // 12 —á–∞—Å–æ–≤ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
    const now = Date.now();
    return now - timestamp <= TWELVE_HOURS;
  }
}
