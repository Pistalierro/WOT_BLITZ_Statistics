import {inject, Injectable} from '@angular/core';
import {AppDB, IndexedDbService} from './indexed-db.service';
import {FirestoreStorageService} from './firestore-storage.service';

/** –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, "–ø—É—Å—Ç—ã–µ" –ª–∏ –¥–∞–Ω–Ω—ã–µ (–ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤/–æ–±—ä–µ–∫—Ç/—Å—Ç—Ä–æ–∫–∞) */
function isEmptyData(data: any): boolean {
  if (data == null) return true;
  if (Array.isArray(data) && data.length === 0) return true;
  if (typeof data === 'object' && Object.keys(data).length === 0) return true;
  if (typeof data === 'string' && data.trim().length === 0) return true;
  return false;
}

/** –í–æ–∑–≤—Ä–∞—â–∞–µ–º "–ø—É—Å—Ç—ã–µ" –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏ */
function getEmptyData<T>(): T {
  // –û–±—ã—á–Ω–æ —Ö–æ—Ç–∏–º –≤–µ—Ä–Ω—É—Ç—å –ª–∏–±–æ [] (–µ—Å–ª–∏ —á–∞—â–µ –æ–∂–∏–¥–∞–µ–º –º–∞—Å—Å–∏–≤),
  // –ª–∏–±–æ {} if object. –ú–æ–∂–µ—à—å –æ—Å—Ç–∞–≤–∏—Ç—å [], —á—Ç–æ–±—ã —Ç–æ—á–Ω–æ –Ω–µ –±—ã–ª–æ .length –æ—à–∏–±–∫–∏
  return [] as unknown as T;
}

@Injectable({providedIn: 'root'})
export class SyncService {
  private indexedDb = inject(IndexedDbService);
  private firestore = inject(FirestoreStorageService);

  /** –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –≤ IndexedDB –∏ Firestore */
  async saveDataToAllStorages<T>(store: keyof AppDB, key: string | number, data: T): Promise<void> {
    if (data == null) {
      console.warn(`‚ö† [Sync] –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (store='${store}', key='${key}')`);
      return;
    }
    try {
      await this.indexedDb.saveDataToIndexedDB(store, key, data);
      await this.firestore.saveDataToFirestore(store, key.toString(), data);
      // console.log(`‚úÖ [Sync] '${store}'/'${key}' —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤–µ–∑–¥–µ.`);
    } catch (err: any) {
      console.error(`‚ùå [Sync] –û—à–∏–±–∫–∞ –ø—Ä–∏ saveDataToAllStorages('${store}', '${key}')`, err.message);
    }
  }

  /** –ó–∞–≥—Ä—É–∂–∞–µ–º, —Å–Ω–∞—á–∞–ª–∞ –∏–∑ IndexedDB, –µ—Å–ª–∏ –Ω–µ—Ç ‚Äì –∏–∑ Firestore, –µ—Å–ª–∏ –Ω–µ—Ç ‚Äì API, –∏–Ω–∞—á–µ –ø—É—Å—Ç–æ–µ  */
  async getDataFromAllStorages<T>(
    store: keyof AppDB,
    key: string | number,
    fetchApiFn?: () => Promise<T>,
    isFreshNeeded: boolean = false,
    maxAgeHours: number = 12,
  ): Promise<T> {
    try {
      // 1) –ü—Ä–æ–≤–µ—Ä—è–µ–º IndexedDB
      const fromIndexedDb = await this.indexedDb.getDataFromIndexedDB<T>(store, key);
      if (fromIndexedDb && !isEmptyData(fromIndexedDb.data)) {
        console.log(`‚úÖ [Sync] '${key}' –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ IndexedDB (store='${store}'), ts=${fromIndexedDb.timestamp}`);
        if (isFreshNeeded) {
          if (this.isDataFresh(fromIndexedDb.timestamp, maxAgeHours)) {
            console.log(`‚è∞ [Sync] '${key}' –≤ IndexedDB —Å–≤–µ–∂–∏–µ ‚Äì –≤–æ–∑–≤—Ä–∞—â–∞–µ–º.`);
            return fromIndexedDb.data;
          } else {
            console.warn(`‚ö† [Sync] '${key}' –≤ IndexedDB –ø—Ä–æ—Ç—É—Ö–ª–∏ ‚Äì –∏—â–µ–º –¥–∞–ª—å—à–µ...`);
          }
        } else {
          return fromIndexedDb.data;
        }
      } else {
        console.log(`‚ö† [Sync] '${key}' –Ω–µ—Ç –≤ IndexedDB (–∏–ª–∏ –ø—É—Å—Ç—ã). –ò–¥—ë–º –≤ Firestore...`);
      }

      // 2) –ü—Ä–æ–≤–µ—Ä—è–µ–º Firestore
      const fromFirestore = await this.firestore.loadDataFromFirestore<T>(store, key.toString());
      if (fromFirestore && !isEmptyData(fromFirestore.data)) {
        console.log(`üì• [Sync] '${key}' –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ Firestore, ts=${fromFirestore.timestamp}`);
        if (isFreshNeeded) {
          if (this.isDataFresh(fromFirestore.timestamp, maxAgeHours)) {
            console.log(`‚è∞ [Sync] '${key}' –≤ Firestore —Å–≤–µ–∂–∏–µ ‚Äì –ø–∏—à–µ–º –≤ IndexedDB –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º.`);
            await this.indexedDb.saveDataToIndexedDB(store, key, fromFirestore.data, fromFirestore.timestamp);
            return fromFirestore.data;
          } else {
            console.warn(`‚ö† [Sync] '${key}' –≤ Firestore —É—Å—Ç–∞—Ä–µ–ª–∏ ‚Äì –ø–æ–π–¥—ë–º –≤ API...`);
          }
        } else {
          await this.indexedDb.saveDataToIndexedDB(store, key, fromFirestore.data, fromFirestore.timestamp);
          return fromFirestore.data;
        }
      } else {
        console.log(`‚ö† [Sync] '${key}' –Ω–µ—Ç –≤ Firestore (–∏–ª–∏ –ø—É—Å—Ç—ã–µ).`);
      }

      // 3) –î–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª–∏, –ø—Ä–æ–±—É–µ–º API
      if (fetchApiFn) {
        console.warn(`‚ö† [Sync] '${key}' –Ω–µ—Ç/—É—Å—Ç–∞—Ä–µ–ª–∏ –≤ –ë–î. –í—ã–∑—ã–≤–∞–µ–º fetchApiFn...`);
        const apiData = await fetchApiFn();
        if (!isEmptyData(apiData)) {
          await this.saveDataToAllStorages(store, key, apiData);
          console.log(`‚úÖ [Sync] '${key}' –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ API –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î.`);
          return apiData;
        }
        console.warn(`‚ùå [Sync] API –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è '${key}'. –í–æ–∑–≤—Ä–∞—â–∞–µ–º []...`);
        return getEmptyData<T>();
      }

      // 4) –ï—Å–ª–∏ fetchApiFn –Ω–µ –∑–∞–¥–∞–Ω –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø—É—Å—Ç—ã–µ –¥–∞–∂–µ –∏–∑ API
      console.warn(`‚ö† [Sync] '${key}' –Ω–µ—Ç –Ω–∏ –≤ IndexedDB, –Ω–∏ –≤ Firestore, –Ω–∏ –≤ API. –í–æ–∑–≤—Ä–∞—â–∞–µ–º [].`);
      return getEmptyData<T>();
    } catch (error: any) {
      console.error(`‚ùå [Sync] –û—à–∏–±–∫–∞ getDataFromAllStorages('${store}', '${key}'):`, error);
      return getEmptyData<T>();
    }
  }

  /** –ü—Ä–∏–º–µ—Ä: –ø—Ä–æ–≤–µ—Ä–∫–∞ "—Å–≤–µ–∂–µ—Å—Ç–∏" –¥–∞–Ω–Ω—ã—Ö (–ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏) */
  isDataFresh(timestamp: number, maxAgeHours = 12): boolean {
    const now = Date.now();
    return (now - timestamp) <= (maxAgeHours * 60 * 60 * 1000);
  }
}
