import {inject, Injectable} from '@angular/core';
import {HttpClient} from '@angular/common/http';
import {ClanIndexedDbService} from './clan-indexeddb.service';
import {ClanFirestoreService} from './clan-firestore.service';
import {ClanUtilsService} from './clan-utils.service';
import {ApiResponse, BasicClanData, ClanDetails, ClanListResponse} from '../../models/clan/clan-response.model';
import {apiConfig} from '../../app.config';
import {firstValueFrom} from 'rxjs';

@Injectable({
  providedIn: 'root',
})
export class ClanDataService {

  private http = inject(HttpClient);
  private indexedDbService = inject(ClanIndexedDbService);
  private firestoreService = inject(ClanFirestoreService);
  private utilsService = inject(ClanUtilsService);

  async fetchAllClans(limit: number, maxRetries: number = 3, delayMs: number = 1000): Promise<BasicClanData[]> {
    console.log(`üìå –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≤—Å–µ—Ö –∫–ª–∞–Ω–æ–≤ (–ª–∏–º–∏—Ç: ${limit})`);

    let attempt = 0;

    while (attempt < maxRetries) {
      try {
        console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ ${attempt + 1} / ${maxRetries}`);

        const firstResponse = await firstValueFrom(
          this.http.get<ClanListResponse>(
            `${apiConfig.baseUrl}/clans/list/?application_id=${apiConfig.applicationId}&limit=${limit}&page_no=1`
          )
        );

        if (!firstResponse || !firstResponse.data) {
          throw new Error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –î–∞–Ω–Ω—ã–µ –æ—Ç API –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã');
        }

        const totalClans = firstResponse.meta.total;
        const totalPages = Math.ceil(totalClans / limit);

        console.log(`‚úÖ –í—Å–µ–≥–æ –∫–ª–∞–Ω–æ–≤: ${totalClans}, –≤—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü: ${totalPages}`);

        if (totalPages === 0) {
          throw new Error('‚ö†Ô∏è –í API –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∫–ª–∞–Ω–∞—Ö (0 —Å—Ç—Ä–∞–Ω–∏—Ü).');
        }

        const allData = await this.utilsService.fetchPaginatedData<ClanDetails, BasicClanData>(
          (page) =>
            `${apiConfig.baseUrl}/clans/list/?application_id=${apiConfig.applicationId}&limit=${limit}&page_no=${page}`,
          totalPages,
          (response: ApiResponse<ClanDetails>) => {
            if (!response || response.status !== 'ok' || !response.data) {
              console.warn('‚ö†Ô∏è –ü—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ —Å—Ç–∞—Ç—É—Å –æ—à–∏–±–∫–∏ –≤ API –æ—Ç–≤–µ—Ç–µ:', response);
              return [];
            }

            const rawDataArray: ClanDetails[] = Array.isArray(response.data)
              ? response.data
              : Object.values(response.data ?? {});

            return rawDataArray.map((clan) => ({
              clan_id: clan.clan_id,
              name: clan.name,
              tag: clan.tag,
              members_count: clan.members_count ?? 0,
              created_at: clan.created_at ?? 0,
            }));
          }
        );

        if (!allData.length) {
          throw new Error('‚ùå –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –∫–ª–∞–Ω–∞—Ö –ø—É—Å—Ç—ã!');
        }

        console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${allData.length} –∫–ª–∞–Ω–æ–≤.`);
        return allData;

      } catch (error: any) {
        console.error(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ (–ü–æ–ø—ã—Ç–∫–∞ ${attempt + 1} / ${maxRetries}):`, error.message);

        if (attempt < maxRetries - 1) {
          const waitTime = delayMs * Math.pow(2, attempt);
          console.log(`‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ ${waitTime / 1000} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π...`);
          await new Promise((resolve) => setTimeout(resolve, waitTime));
        } else {
          console.error('‚ùå –ò—Å—á–µ—Ä–ø–∞–Ω—ã –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞. API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.');
          return [];
        }
      }
      attempt++;
    }
    return [];
  }
}
