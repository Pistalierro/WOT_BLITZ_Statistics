import {inject, Injectable} from '@angular/core';
import {HttpClient} from '@angular/common/http';
import {apiConfig} from '../../app.config';
import {lastValueFrom, timeout} from 'rxjs';
import {PlayerData} from '../../models/player/player-response.model';
import {ApiResponse} from '../../models/clan/clan-response.model';
import {ClanFirestoreService} from './clan-firestore.service';
import {ClanIndexedDbService} from './clan-indexeddb.service';

@Injectable({
  providedIn: 'root'
})
export class ClanUtilsService {

  private http = inject(HttpClient);
  private firestoreService = inject(ClanFirestoreService);
  private indexedDbService = inject(ClanIndexedDbService);

  async getClanWinRate(membersIds: number[]): Promise<number> {
    if (!Array.isArray(membersIds) || membersIds.length === 0) {
      console.warn('‚ö† –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–ª–∞–Ω–∞ –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º, –≤–æ–∑–≤—Ä–∞—â–∞—é 0');
      return 0;
    }

    try {
      const url = `${apiConfig.baseUrl}/account/info/?application_id=${apiConfig.applicationId}&account_id=${membersIds.join(',')}&fields=statistics.all.battles,statistics.all.wins`;
      const res: any = await lastValueFrom(this.http.get(url));
      if (!res || !res.data) {
        console.warn('‚ö† –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç API –¥–ª—è —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞—é 0');
        return 0;
      }
      const rawData = Object.values(res.data) as PlayerData[];

      if (!rawData.length) {
        console.warn('‚ö† –ù–µ –ø—Ä–∏—à–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–∏ –ø–æ –æ–¥–Ω–æ–º—É –∏–≥—Ä–æ–∫—É, –≤–æ–∑–≤—Ä–∞—â–∞—é 0');
        return 0;
      }
      const validMembers = rawData.filter((member: PlayerData) => {
        if (!member) {
          return false;
        }

        if (!member.statistics) {
          console.warn('‚ö† –ò–≥—Ä–æ–∫ –±–µ–∑ –ø–æ–ª—è "statistics" ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
          return false;
        }

        if (!member.statistics.all) {
          console.warn('‚ö† –ò–≥—Ä–æ–∫ –±–µ–∑ –ø–æ–ª—è "statistics.all" ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
          return false;
        }
        return true;
      });

      if (!validMembers.length) {
        console.warn('‚ö† –í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –æ–∫–∞–∑–∞–ª–∏—Å—å —Å –±–∏—Ç–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π, –≤–æ–∑–≤—Ä–∞—â–∞—é 0');
        return 0;
      }

      let totalWins = 0;
      let totalBattles = 0;

      for (const member of validMembers) {
        const battles = member.statistics.all.battles || 0;
        const wins = member.statistics.all.wins || 0;
        totalBattles += battles;
        totalWins += wins;
      }

      if (totalBattles <= 0) {
        console.warn('‚ö† –ù–æ–ª—å –±–æ—ë–≤ —É –≤—Å–µ—Ö, winRate = 0');
        return 0;
      }
      return (totalWins / totalBattles) * 100;
    } catch (err: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ winRate:', err.message);
      return 0;
    }
  }

  async fetchPaginatedData<T, R>(
    urlGenerator: (page: number) => string,
    totalPages: number,
    processResponse: (response: ApiResponse<T>) => R[],
    batchSize: number = 10,        // ‚úÖ –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –º–æ–∂–Ω–æ –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å
    requestTimeout: number = 5000  // ‚úÖ –¢–∞–π–º–∞—É—Ç —Ç–æ–∂–µ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π
  ): Promise<R[]> {
    const allData: R[] = [];

    try {
      let pagesLoaded = 0;

      for (let i = 1; i <= totalPages; i += batchSize) {
        const batchRequests: Promise<ApiResponse<T>>[] = [];

        for (let j = 0; j < batchSize && i + j <= totalPages; j++) {
          const url = urlGenerator(i + j);
          batchRequests.push(
            lastValueFrom(this.http.get<ApiResponse<T>>(url).pipe(timeout(requestTimeout)))
          );
        }

        const batchResponses = await Promise.allSettled(batchRequests);

        batchResponses.forEach(result => {
          if (result.status === 'fulfilled') {
            allData.push(...processResponse(result.value)); // ‚úÖ –¢–µ–ø–µ—Ä—å `R[]` –º–æ–∂–µ—Ç –±—ã—Ç—å `number[]` –∏–ª–∏ `ClanListEntry[]`
          } else {
            console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:`, result.reason);
          }
        });

        pagesLoaded += batchResponses.length;
        const progressPercent = ((pagesLoaded / totalPages) * 100).toFixed(2);
        console.clear();
        console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü: ${i}-${Math.min(i + batchSize - 1, totalPages)} | üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: ${progressPercent}%`);
        await this.delay(1000);
      }
    } catch (err: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', err.message);
    }

    return allData;
  }

  delay(ms: number): Promise<void> {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  async loadDataWithFallback<T extends any[]>(key: string, maxAgeMinutes: number = 30): Promise<T> {
    try {
      const record = await this.indexedDbService.getRecord(key);
      if (record && record.data) {
        const fresh = this.isFresh(record.timestamp, maxAgeMinutes);
        if (fresh) {
          console.log(`‚úÖ '${key}' –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ IndexedDB (–¥–∞–Ω–Ω—ã–µ —Å–≤–µ–∂–∏–µ)`);
          return record.data as T;
        } else {
          console.warn(`‚ö† '${key}' —É—Å—Ç–∞—Ä–µ–ª–æ (–±–æ–ª–µ–µ ${maxAgeMinutes} –º–∏–Ω—É—Ç), —É–¥–∞–ª—è–µ–º –∏–∑ IndexedDB...`);
          await this.indexedDbService.removeRecord(key);
        }
      }
      console.warn(`‚ö† '${key}' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ IndexedDB –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª–æ, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ Firestore...`);
      const firestoreData = await this.firestoreService.loadCollection<T>(key);
      if (firestoreData && firestoreData.length > 0) {
        await this.indexedDbService.putRecord(key, firestoreData);
        return firestoreData;
      }

      console.warn(`‚ö† '${key}' –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ IndexedDB, –Ω–∏ –≤ Firestore. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤.`);
      return [] as unknown as T;
    } catch (err: any) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ loadDataWithFallback('${key}'):`, err);
      return [] as unknown as T;
    }
  }

  async saveDataToIndexedDb<T>(key: string, data: T): Promise<void> {
    await this.indexedDbService.putRecord(key, data);
  }

  chunkArray<T>(array: T[], size: number): T[][] {
    return Array.from({length: Math.ceil(array.length / size)}, (_, i) =>
      array.slice(i * size, i * size + size)
    );
  }

  private isFresh(timestamp: number, maxAgeMinutes: number): boolean {
    const elapsedMinutes = (Date.now() - timestamp) / 60000;
    return elapsedMinutes < maxAgeMinutes;
  }
}


