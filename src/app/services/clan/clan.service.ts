import {inject, Injectable, signal} from '@angular/core';
import {HttpClient} from '@angular/common/http';
import {ClanDetails, ClanInfoResponse, ClanListEntry, ClanListResponse, ExtendedClanDetails} from '../../models/clan/clan-response.model';
import {firstValueFrom, lastValueFrom} from 'rxjs';
import {apiConfig} from '../../app.config';
import {ClanUtilsService} from './clan-utils.service';
import {ClanFirestoreService} from './clan-firestore.service';
import {Auth} from '@angular/fire/auth';

@Injectable({
  providedIn: 'root'
})
export class ClanService {
  loading = signal<boolean>(false); // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
  error = signal<string | null>(null); // –û—à–∏–±–∫–∏
  allClansIds: number[] = [];
  largeClansIds: number[] = [];
  topClanIds: number[] = [];
  topClanDetails = signal<ExtendedClanDetails [] | null>(null);
  totalPages = 0;
  totalClans = 0;
  private http = inject(HttpClient);
  private limit = 100;
  private clanUtilsService = inject(ClanUtilsService);
  private firestoreService = inject(ClanFirestoreService);
  private auth = inject(Auth);

  constructor() {
    void this.initData();
  }

  async getAllClansIds(): Promise<void> {
    this.allClansIds = [];

    try {
      this.loading.set(true);
      this.error.set(null);

      const firstResponse = await firstValueFrom(
        this.http.get<ClanListResponse>(
          `${apiConfig.baseUrl}/clans/list/?application_id=${apiConfig.applicationId}&limit=${this.limit}&page_no=1`
        )
      );

      if (!firstResponse || !firstResponse.data) {
        throw new Error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –î–∞–Ω–Ω—ã–µ –æ—Ç API –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã');
      }

      this.totalClans = firstResponse.meta.total;
      this.totalPages = Math.ceil(this.totalClans / this.limit);
      console.log('‚úÖ –í—Å–µ–≥–æ –∫–ª–∞–Ω–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: ', this.totalClans);

      this.allClansIds = await this.clanUtilsService.fetchPaginatedData<ClanListEntry, number>(
        (page) => `${apiConfig.baseUrl}/clans/list/?application_id=${apiConfig.applicationId}&limit=${this.limit}&page_no=${page}`,
        this.totalPages,
        (response) => response.status === 'ok' && response.data
          ? Array.isArray(response.data)
            ? response.data.map(clan => clan.clan_id)
            : Object.values(response.data).map((clan: ClanListEntry) => clan.clan_id)
          : []
      );

      this.clanUtilsService.saveToStorage('allClansIds', this.allClansIds);
      console.log(`üìå –í—Å–µ–≥–æ clan_id –≤ —Å–ø–∏—Å–∫–µ: ${this.allClansIds.length}`);

      await this.firestoreService.saveData('allClansIds', this.allClansIds);
      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ `allClansIds` —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ localStorage –∏ Firestore!');

      console.log('‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    } catch (err: any) {
      this.error.set(err.message);
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–ª–∞–Ω–æ–≤:', err.message);
    } finally {
      this.loading.set(false);
    }
  }

  async getBigClansIds(): Promise<void> {
    this.largeClansIds = [];
    if (!this.allClansIds.length) console.log('‚ö† –ú–∞—Å—Å–∏–≤ allClansIds –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º getBigClansIds() –ø—É—Å—Ç');

    if (!this.totalPages || this.totalPages <= 0) {
      this.totalPages = Math.ceil(this.allClansIds.length / this.limit);
    }

    console.log(`üìå –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É, –≤—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü: ${this.totalPages}`);

    try {
      this.loading.set(true);
      this.error.set(null);

      await this.clanUtilsService.fetchPaginatedData<ClanDetails, ClanDetails>(
        (page) => {
          {
            const chunkStart = (page - 1) * this.limit;
            const chunkIds = this.allClansIds.slice(chunkStart, chunkStart + this.limit);
            return `${apiConfig.baseUrl}/clans/info/?application_id=${apiConfig.applicationId}&clan_id=${chunkIds.join(',')}`;
          }
        },
        this.totalPages,
        (response) => {
          if (response.status === 'ok' && response.data) {
            this.largeClansIds.push(
              ...Object.values(response.data)
                .filter(clan => clan && typeof clan.members_count === 'number' && clan.members_count >= 20)
                .map(clan => clan.clan_id)
            );
          }
          return [];
        }
      );

      this.clanUtilsService.saveToStorage('largeClansIds', this.largeClansIds);
      console.log('‚úÖ `largeClansIds` —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ localStorage');

      await this.firestoreService.saveData('largeClansIds', this.largeClansIds);
      console.log('‚úÖ `largeClansIds` —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Firestore');

      console.log(`üìå –ö–ª–∞–Ω—ã —Å 20+ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏: ${this.largeClansIds.length}`);
    } catch (err: any) {
      console.log(err);
    } finally {
      this.loading.set(false);
    }
  }

  async getTopClansIds(): Promise<void> {
    this.topClanIds = [];

    if (!this.largeClansIds || !Array.isArray(this.largeClansIds) || !this.largeClansIds.length) {
      console.warn('‚ö† –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö ID –±–æ–ª—å—à–∏—Ö –∫–ª–∞–Ω–æ–≤!');
      return;
    }

    if (!this.totalPages || this.totalPages <= 0) {
      this.totalPages = Math.ceil(this.largeClansIds.length / this.limit);
    }

    try {
      this.loading.set(true);
      this.error.set(null);

      // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–ª–∞–Ω–∞—Ö
      const allClans = await this.clanUtilsService.fetchPaginatedData<ClanDetails, ExtendedClanDetails>(
        (page) => {
          const chunkStart = (page - 1) * this.limit;
          const chunkIds = this.largeClansIds.slice(chunkStart, chunkStart + this.limit);
          return `${apiConfig.baseUrl}/clans/info/?application_id=${apiConfig.applicationId}&clan_id=${chunkIds.join(',')}`;
        },
        this.totalPages,
        (response) => {
          const result: ExtendedClanDetails[] = [];

          if (response.status === 'ok' && response.data) {
            for (const clanId in response.data) {
              const clanData = response.data[clanId];

              if (!clanData) {
                console.warn(`‚ö† –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–ª–∞–Ω—É —Å ID ${clanId} ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—é`);
                continue;
              }
              result.push({...clanData, winRate: 0} as ExtendedClanDetails);
            }
          }
          return result;
        }
      );

      if (!allClans || !Array.isArray(allClans) || !allClans.length) {
        console.warn('‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–∏ –ø–æ –æ–¥–Ω–æ–º—É –∫–ª–∞–Ω—É, –≤—ã—Ö–æ–¥');
        return;
      }

      for (const clan of allClans) {
        clan.winRate = await this.clanUtilsService.getClanWinRate(clan.members_ids);
      }

      const filteredClans = allClans.filter(clan => clan && typeof clan.clan_id === 'number' && clan.clan_id > 0 && typeof clan.winRate === 'number' && clan.winRate > 0);

      if (!filteredClans.length) {
        console.warn('‚ö† –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ winRate > 0 –Ω–µ—Ç –∫–ª–∞–Ω–æ–≤');
        this.topClanIds = [];
        return;
      }

      filteredClans.sort((a, b) => (b.winRate ?? 0) - (a.winRate ?? 0));

      const top50 = filteredClans.slice(0, 50);
      this.topClanIds = top50.map(clan => clan.clan_id);

      this.clanUtilsService.saveToStorage('topClanIds', this.topClanIds);
      console.log('‚úÖ `topClanIds` —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ localStorage');

      await this.firestoreService.saveData('topClanIds', this.topClanIds);
      console.log('‚úÖ `topClanIds` —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Firestore');

      console.log('‚úÖ –¢–æ–ø-50 –∫–ª–∞–Ω–æ–≤ –ø–æ winRate:', this.topClanIds);
    } catch (err: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ getTopClansIds:', err);
      this.error.set(err.message);
    } finally {
      this.loading.set(false);
    }
  }

  async getTopClanDetails(): Promise<void> {
    if (!this.topClanIds.length) {
      console.log('‚ö† –°–ø–∏—Å–æ–∫ ID –¢–û–ü –∫–ª–∞–Ω–æ–≤ –ø—É—Å—Ç');
      return;
    }

    try {
      this.loading.set(true);
      this.error.set(null);

      const url = `https://api.wotblitz.eu/wotb/clans/info/?application_id=8b707eb789d2bbc368fd873f5406b32d&clan_id=${this.topClanIds.join(',')}`;
      const res = await lastValueFrom(this.http.get<ClanInfoResponse>(url));

      if (!res || !res.data) {
        console.warn('‚ö† API –Ω–µ –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã–µ –æ –∫–ª–∞–Ω–∞—Ö');
        return;
      }

      const clansList = Object.values(res.data) as ClanDetails[];

      const extendedClans: ExtendedClanDetails[] = await Promise.all(
        clansList.map(async (clan) => {
          const winRate = await this.clanUtilsService.getClanWinRate(clan.members_ids);
          return {...clan, winRate};
        })
      );

      extendedClans.sort((a, b) => (b.winRate ?? 0) - (a.winRate ?? 0));

      this.topClanDetails.set(extendedClans);

      this.clanUtilsService.saveToStorage('topClanDetails', extendedClans);
      console.log('‚úÖ `topClanDetails` —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ localStorage');

      await this.firestoreService.saveData('topClanDetails', extendedClans);
      console.log('‚úÖ `topClanDetails` —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Firestore');
    } catch (error: any) {
      this.error.set(error.message);
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –∫–ª–∞–Ω–∞—Ö:', error.message);
    } finally {
      this.loading.set(false);
    }
  }

  async initData(): Promise<void> {
    console.log('üìå –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è `ClanService`...');

    this.allClansIds = await this.clanUtilsService.loadDataWithFallback('allClansIds', this.allClansIds);
    this.largeClansIds = await this.clanUtilsService.loadDataWithFallback('largeClansIds', this.largeClansIds);
    this.topClanIds = await this.clanUtilsService.loadDataWithFallback('topClanIds', this.topClanIds);

    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', {
      allClansIds: this.allClansIds.length,
      largeClansIds: this.largeClansIds.length,
      topClanIds: this.topClanIds.length
    });

    this.firestoreService.loadCollection<ExtendedClanDetails[]>('topClanDetails')
      .then(firestoreData => {
        if (firestoreData && firestoreData.length > 0) {
          this.topClanDetails.set(firestoreData);
          console.log('‚úÖ `topClanDetails` –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ Firestore');
        } else console.warn('‚ö† –í Firestore –Ω–µ—Ç `topClanDetails`');
      }).catch(error => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ `topClanDetails` –∏–∑ Firestore:', error.message);
      this.error.set(error.message);
    });
  }
}
