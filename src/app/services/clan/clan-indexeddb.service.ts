import {Injectable} from '@angular/core';
import Dexie, {Table} from 'dexie';
import {BasicClanData, KeyValueRecord} from '../../models/clan/clan-response.model';

export class ClanDB extends Dexie {
  clans!: Table<BasicClanData, number>;
  keyValue!: Table<KeyValueRecord, string>;

  constructor() {
    super('ClanDB');
    this.version(1).stores({
      clans: 'clan_id, name, tag',
      keyValue: 'key'
    });
  }
}


@Injectable({
  providedIn: 'root'
})

export class ClanIndexedDbService {
  db: ClanDB;

  constructor() {
    this.db = new ClanDB();
  }


  async saveDataToIndexedDB<T>(key: string, data: T[]): Promise<void> {
    try {
      if (data.length === 0) {
        console.warn('üì¢ –ü–µ—Ä–µ–¥–∞–Ω –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è.');
        return;
      }

      if (typeof data[0] === 'object') {
        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü—É `clans`
        await this.db.clans.bulkPut(data as BasicClanData[]);
        console.log(`‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü—É "clans", –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: ${data.length}`);
      } else if (typeof data[0] === 'number') {
        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ —á–∏—Å–µ–ª –≤ keyValue –∫–∞–∫ JSON
        await this.db.keyValue.put({key, data, timestamp: Date.now()});
        console.log(`‚úÖ –ß–∏—Å–ª–æ–≤–æ–π –º–∞—Å—Å–∏–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ keyValue —Å –∫–ª—é—á–æ–º "${key}"`);
      } else {
        console.error('‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ IndexedDB:', error);
    }
  }

  async getDataFromIndexedDB<T>(key: string): Promise<T[]> {
    try {
      const record = await this.db.keyValue.get(key);
      if (record) {
        return Array.isArray(record.data) ? record.data : []; // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤
      }

      const clans = await this.db.clans.toArray();
      if (clans.length > 0) {
        console.log(`üì• –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã "clans", –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: ${clans.length}`);
        return clans as T[];
      }

      console.warn(`‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –ø–æ –∫–ª—é—á—É "${key}" –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.`);
      return [];
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ IndexedDB:', error);
      return [];
    }
  }


  async clearAllClans(): Promise<void> {
    await this.db.clans.clear();
  }

  async findClansByNameOrTag(searchTerm: string): Promise<BasicClanData[]> {
    console.log(`üîé –ü–æ–∏—Å–∫ –≤ IndexedDB: "${searchTerm}"`);

    const results = await this.db.clans
      .where('tag')
      .startsWithIgnoreCase(searchTerm)
      .or('name')
      .startsWithIgnoreCase(searchTerm)
      .toArray();

    console.log(`‚úÖ IndexedDB –≤–µ—Ä–Ω—É–ª ${results.length} –∫–ª–∞–Ω–æ–≤`, results);
    return results;
  }


  async putRecord(key: string, data: any): Promise<void> {
    const record: KeyValueRecord = {key, data, timestamp: Date.now()};
    await this.db.keyValue.put(record);
  }

  async getRecord(key: string): Promise<KeyValueRecord | undefined> {
    return this.db.keyValue.get(key);
  }

  async removeRecord(key: string): Promise<void> {
    await this.db.keyValue.delete(key);
  }
}

