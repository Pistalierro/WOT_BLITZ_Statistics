import {inject, Injectable} from '@angular/core';
import {collection, doc, Firestore, getDoc, getDocs, setDoc} from '@angular/fire/firestore';
import {Auth} from '@angular/fire/auth';

@Injectable({
  providedIn: 'root'
})
export class ClanFirestoreService {
  private firestore = inject(Firestore);
  private batchSize = 9000; // üî• –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Firestore (–º–∞–∫—Å–∏–º—É–º 1–ú–± –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç)
  private auth = inject(Auth);

  async saveData<T extends any[]>(key: string, data: T): Promise<void> {
    if (!data || data.length === 0) {
      console.warn(`‚ö† –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Firestore: ${key}`);
      return;
    }

    try {
      const timestamp = Date.now(); // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫—É –≤—Ä–µ–º–µ–Ω–∏
      const payload = {data: [...data], timestamp}; // –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è

      if (data.length > this.batchSize) {
        await this.saveLargeData(key, payload);
      } else {
        const ref = doc(this.firestore, 'clanData', key);
        await setDoc(ref, payload);
      }
    } catch (error: any) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ '${key}' –≤ Firestore:`, error.message);
    }
  }

  async loadData<T extends any[]>(key: string): Promise<{ data: T; timestamp: number } | null> {
    try {
      const ref = doc(this.firestore, 'clanData', key);
      const snapshot = await getDoc(ref);

      if (snapshot.exists()) {
        return snapshot.data() as { data: T; timestamp: number };
      }

      return await this.loadLargeData<T>(key);
    } catch (error: any) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ '${key}' –∏–∑ Firestore:`, error.message);
      return null;
    }
  }


  private async saveLargeData<T extends any[]>(key: string, payload: { data: T; timestamp: number }): Promise<void> {
    const batchCount = Math.ceil(payload.data.length / this.batchSize);
    console.log(`üìå –°–æ—Ö—Ä–∞–Ω—è–µ–º '${key}' –≤ Firestore –ø–æ ${this.batchSize} —ç–ª–µ–º–µ–Ω—Ç–æ–≤. –í—Å–µ–≥–æ —á–∞—Å—Ç–µ–π: ${batchCount}`);

    console.log('Firestore –∑–∞–ø—Ä–æ—Å! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', this.auth.currentUser); // üî• –õ–æ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    for (let i = 0; i < batchCount; i++) {
      const chunk = payload.data.slice(i * this.batchSize, (i + 1) * this.batchSize);
      const chunksRef = collection(this.firestore, 'clanData', key, 'chunks');
      const ref = doc(chunksRef, `batch_${i}`);
      await setDoc(ref, {data: chunk, timestamp: payload.timestamp}); // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å –º–µ—Ç–∫–æ–π –≤—Ä–µ–º–µ–Ω–∏

      console.log(`‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω –±–∞—Ç—á ${i + 1}/${batchCount} (${chunk.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤)`);
    }
  }

  private async loadLargeData<T extends any[]>(key: string): Promise<{ data: T; timestamp: number } | null> {
    const combinedData: T = [] as unknown as T;
    const chunksRef = collection(this.firestore, 'clanData', key, 'chunks');

    console.log(`üìå –ó–∞–≥—Ä—É–∂–∞–µ–º '${key}' –∏–∑ Firestore —á–∞—Å—Ç—è–º–∏...`);

    try {
      const snapshot = await getDocs(chunksRef);

      if (snapshot.empty) {
        console.warn(`‚ö† –í Firestore –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è '${key}'`);
        return null;
      }

      let timestamp: number | null = null;

      snapshot.forEach(doc => {
        const chunk = doc.data()['data'] as unknown as T;
        combinedData.push(...chunk);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∫—É –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        if (timestamp === null) {
          timestamp = doc.data()['timestamp'];
        }
      });

      if (timestamp === null) {
        console.warn(`‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ—Ç–∫—É –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è '${key}'`);
        return null;
      }

      console.log(`üéâ –í—Å–µ —á–∞—Å—Ç–∏ '${key}' –∑–∞–≥—Ä—É–∂–µ–Ω—ã (${combinedData.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤)`);
      return {data: combinedData, timestamp};
    } catch (error: any) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ '${key}' –∏–∑ Firestore:`, error.message);
      return null;
    }
  }
}
