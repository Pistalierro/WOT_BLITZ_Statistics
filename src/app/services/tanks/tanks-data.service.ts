import {inject, Injectable} from '@angular/core';
import {HttpClient} from '@angular/common/http';
import {collection, doc, Firestore, getDoc, setDoc} from '@angular/fire/firestore';
import {IndexedDbService} from '../../shared/services/data/indexed-db.service';
import {BattlesByTier, BattlesByWinAvgDamage, BattlesByWinRate, TankData, TankStatsResponse} from '../../models/tank/tanks-response.model';
import {SyncService} from '../../shared/services/data/sync.service';
import {catchError, firstValueFrom, lastValueFrom, throwError} from 'rxjs';
import {apiConfig} from '../../app.config';
import {ApiResponse, TankProfile} from '../../models/tank/tank-full-info.model';
import {FirestoreStorageService} from '../../shared/services/data/firestore-storage.service';

@Injectable({
  providedIn: 'root'
})
export class TanksDataService {
  private http = inject(HttpClient);
  private firestore = inject(Firestore);
  private indexedDbService = inject(IndexedDbService);
  private syncService = inject(SyncService);
  private firestoreService = inject(FirestoreStorageService);

  async getJsonTanks(): Promise<TankData[]> {
    try {
      const indexedDbTanks = await this.indexedDbService.getDataFromIndexedDB<TankData[]>('tanks', 'jsonTanks');

      if (indexedDbTanks?.data?.length) {
        console.log('‚úÖ [TanksDataService] –î–∞–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã –≤ IndexedDB, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö.');
        return indexedDbTanks.data;
      }

      const jsonTanks = await this.syncService.getDataFromAllStorages<TankData[]>(
        'tanks',
        'jsonTanks',
        () => this.getTanksFromJsonFile()
      );

      if (!jsonTanks || jsonTanks.length === 0) {
        console.warn('‚ö†Ô∏è [TanksDataService] –î–∞–Ω–Ω—ã–µ –æ —Ç–∞–Ω–∫–∞—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ Firestore.');
        return [];
      }

      const parentDocRef = doc(this.firestore, 'tanks', 'jsonTanks');
      const docSnap = await getDoc(parentDocRef);

      if (!docSnap.exists()) {
        console.log('üÜï [TanksDataService] Firestore –ø—É—Å—Ç. –°–æ—Ö—Ä–∞–Ω—è–µ–º...');
        await this.saveJsonTanksToFirestore(jsonTanks);
      }

      await this.indexedDbService.saveDataToIndexedDB('tanks', 'jsonTanks', jsonTanks);
      return jsonTanks;
    } catch (error: any) {
      console.error('‚ùå [TanksDataService] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞–Ω–∫–æ–≤ –∏–∑ Firestore:', error.message);
      return [];
    }
  }

  async saveJsonTanksToFirestore(jsonTanks: TankData[]): Promise<void> {
    if (!jsonTanks.length) {
      console.warn('‚ö† [TanksDataService] jsonTanksList –ø—É—Å—Ç, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.');
      return;
    }
    const parentDocRef = doc(this.firestore, 'tanks', 'jsonTanks');
    const chunksRef = collection(parentDocRef, 'chunks');
    const chunkSize = 100;
    const chunkCount = Math.ceil(jsonTanks.length / chunkSize);
    const timestamp = Date.now();
    console.log(`üìå [TanksDataService] –°–æ—Ö—Ä–∞–Ω—è–µ–º ${jsonTanks.length} —Ç–∞–Ω–∫–æ–≤ —á–∞–Ω–∫–∞–º–∏ –ø–æ ${chunkSize}.`);

    await setDoc(parentDocRef, {chunkCount, timestamp});

    for (let i = 0; i < chunkCount; i++) {
      const chunk = jsonTanks.slice(i * chunkSize, (i + 1) * chunkSize);
      await setDoc(doc(chunksRef, `batch_${i}`), {data: chunk, timestamp});
      console.log(`‚úÖ [TanksDataService] –ß–∞–Ω–∫ #${i + 1}/${chunkCount} —Å–æ—Ö—Ä–∞–Ω—ë–Ω!`);
    }
    console.log('üéâ [TanksDataService] –í—Å–µ —á–∞–Ω–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Firestore!');
  }

  async getTanksFromJsonFile(): Promise<TankData[]> {
    console.log('üìÇ [TanksDataService] –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–∞–Ω–∫–∏ –∏–∑ JSON-—Ñ–∞–π–ª–∞...');
    try {
      const response = this.http.get<{ data: Record<string, TankData>; status: string; meta: any }>('/assets/tankList.json');
      console.log('üîÑ [TanksDataService] –ó–∞–ø—Ä–æ—Å JSON-—Ñ–∞–π–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω...');

      const loadedJson = await lastValueFrom(response);
      console.log('üì• [TanksDataService] –û—Ç–≤–µ—Ç JSON-—Ñ–∞–π–ª–∞ –ø–æ–ª—É—á–µ–Ω:', loadedJson);

      if (!loadedJson || !loadedJson.data) {
        console.warn('‚ö†Ô∏è [TanksDataService] –§–∞–π–ª tankList.json –ø—É—Å—Ç –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω.');
        return [];
      }

      const tanksArray = Object.values(loadedJson.data);

      if (!Array.isArray(tanksArray) || tanksArray.length === 0) {
        console.warn('‚ö†Ô∏è [TanksDataService] –î–∞–Ω–Ω—ã–µ –≤ tankList.json –ø—É—Å—Ç—ã –ø–æ—Å–ª–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è.');
        return [];
      }

      console.log(`‚úÖ [TanksDataService] –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${tanksArray.length} —Ç–∞–Ω–∫–æ–≤ –∏–∑ JSON.`);
      return tanksArray;
    } catch (error: any) {
      console.error('‚ùå [TanksDataService] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ JSON-—Ñ–∞–π–ª–∞:', error.message);
      return [];
    }
  }


  async getPlayerTanksStats(accountId: number): Promise<TankStatsResponse['data'][number]> {
    const url = `${apiConfig.baseUrl}/tanks/stats/?application_id=${apiConfig.applicationId}&account_id=${accountId}`;
    try {
      const res = await lastValueFrom(this.http.get<TankStatsResponse>(url).pipe(
        catchError(err => throwError(() => new Error('–û—à–∏–±–∫–∞ API: ' + err.message)))
      ));

      if (res.status !== 'ok' || !res.data[accountId]) {
        throw new Error('‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ —Ç–∞–Ω–∫–∞—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç');
      }

      return res.data[accountId];
    } catch (error: any) {
      console.error(`[TanksApiService] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Ç–∞–Ω–∫–æ–≤: ${error.message}`);
      throw error;
    }
  }

  async getTankProfile(tankId: number): Promise<TankProfile | null> {
    const url = `${apiConfig.baseUrl}/encyclopedia/vehicleprofile/?application_id=${apiConfig.applicationId}&tank_id=${tankId}`;
    try {
      const res = await firstValueFrom(this.http.get<ApiResponse<TankProfile>>(url).pipe(
        catchError(err => throwError(() => new Error('–û—à–∏–±–∫–∞ API: ' + err.message)))
      ));

      if (res.status !== 'ok' || !res.data || !res.data[tankId]) {
        console.warn(`[TanksApiService] ‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞—Ö —Ç–∞–Ω–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç`);
        return null;
      }

      const apiTankData = res.data[tankId];
      const jsonTanks = await this.getJsonTanks();
      const jsonTankData = jsonTanks.find(tank => tank.tank_id === tankId);

      if (!jsonTankData) {
        console.warn(`‚ö†Ô∏è [TanksApiService] –¢–∞–Ω–∫–∞ —Å ID ${tankId} –Ω–µ—Ç –≤ JSON.`);
        return apiTankData; // –ï—Å–ª–∏ –≤ JSON –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ API-–¥–∞–Ω–Ω—ã–µ
      }

      return {
        ...apiTankData,
        tank_id: jsonTankData.tank_id,
        name: jsonTankData.name,
        tier: jsonTankData.tier,
        type: jsonTankData.type,
        nation: jsonTankData.nation,
        is_premium: jsonTankData.is_premium,
        is_collectible: jsonTankData.is_collectible,
        images: {
          normal: jsonTankData.images?.normal ?? '',
          preview: jsonTankData.images?.normal ?? '',
        }
      };

    } catch (error: any) {
      console.error(`[TanksApiService] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —Ç–∞–Ω–∫–∞: ${error.message}`);
      return null;
    }
  }

  async getAllTanksFromApi(): Promise<Set<number>> {
    const url = `${apiConfig.baseUrl}/encyclopedia/vehicles/?application_id=${apiConfig.applicationId}`;

    try {
      const res = await firstValueFrom(
        this.http.get<{ status: string; data: { [key: number]: { tank_id: number } } }>(url).pipe(
          catchError(err => throwError(() => new Error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ç–∞–Ω–∫–∞—Ö –∏–∑ Wargaming API: ' + err.message)))
        )
      );

      if (res.status !== 'ok' || !res.data) {
        throw new Error('‚ö†Ô∏è [TanksApiService] API Wargaming –Ω–µ –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã–µ.');
      }

      console.log(`üìä [TanksApiService] –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç–∞–Ω–∫–æ–≤ –∏–∑ API: ${Object.keys(res.data).length}`);
      return new Set(Object.keys(res.data).map(Number)); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º Set tank_id
    } catch (error: any) {
      console.error(`[TanksApiService] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ —Ç–∞–Ω–∫–æ–≤: ${error.message}`);
      throw error;
    }
  }

  calculateWinRateAndAvgDamage(battlesByTier: BattlesByTier, winsByTier: Record<number, number>, damageByTier: Record<number, number>) {
    return Object.keys(battlesByTier).reduce((acc, tier) => {
      const tierNum = Number(tier);
      const totalBattles = battlesByTier[tierNum];

      acc.winRateByTier[tierNum] = totalBattles > 0 ? (winsByTier[tierNum] / totalBattles) * 100 : 0;
      acc.avgDamageByTier[tierNum] = totalBattles > 0 ? damageByTier[tierNum] / totalBattles : 0;

      return acc;
    }, {
      winRateByTier: {} as BattlesByWinRate,
      avgDamageByTier: {} as BattlesByWinAvgDamage
    });
  }

}
